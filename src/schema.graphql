type Query {
        users(query: String, first: Int, skip: Int, after: String): [User!]!
        posts(query: String, first: Int, skip: Int, after: String): [Post!]!
        myPosts(query: String): [Post!]!
        greeting(name: String, position: String): String!
        order(item: String, qtd: Int, price: Float!): String!
        add(numbers: [Float!]!): Float!
        comments: [Comment!]!
        grades: [Int!]!
        me: User!
        post(id: ID!): Post!
    }

    type Mutation {
        createUser(data: CreateUserInput!): AuthPayload!
        login(data: LoginUserInput!): AuthPayload!
        deleteUser: User!
        updateUser(data: UpdateUserInput!): User!
        createPost(data: CreatePostInput!): Post!
        deletePost(id: ID!): Post!
        updatePost(id: ID!, data: UpdatePostInput!): Post!
        createComment(data: CreateCommentInput!): Comment!
        deleteComment(id: ID!): Comment!
        updateComment(id: ID!, data: UpdateCommentInput!): Comment!
    }

    type Subscription {
        count: Int!
        comment(postId: ID!): CommentSubscriptionPayload!
        post: PostsubscriptionPayload!
        myPost: PostsubscriptionPayload!    
    }

    type AuthPayload {
        token: String!
        user: User!
    }

    input CreateUserInput {
        name: String! 
        email: String!
        password: String!
    }

    input LoginUserInput {
        email: String!
        password: String!
    }

    input UpdateUserInput {
        name: String
        email: String
        password: String
    }

    input CreatePostInput {
        title: String! 
        body: String!
        published: Boolean!
    }

    input UpdatePostInput {
        title: String
        body: String
        published: Boolean
    }

    input CreateCommentInput {
        text: String! 
        post: ID!
    }

    input UpdateCommentInput {
        text: String
    }

    type User {
        id: ID!
        name: String!
        email: String
        posts: [Post!]!
        comments: [Comment!]!
    }

    type Post {
        id: ID!
        title: String!
        body: String!
        published: Boolean!
        author: User!
        comments: [Comment!]!
    }

    type Comment {
        id: ID!
        text: String!
        author: User!
        post: Post!
    }

    enum MutationType {
        CREATED,
        DELETED,
        UPDATED
    }

    type PostsubscriptionPayload {
        mutation: MutationType!
        node: Post!
    }

    type CommentSubscriptionPayload {
        mutation: MutationType!
        node: Comment!
    }
